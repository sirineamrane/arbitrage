import pandas as pd
import yfinance as yf
import datetime
import os
import time

# ‚úÖ 1Ô∏è‚É£ D√©finition des actifs
assets = {
    "WTI": "CL=F",
    "Brent": "BZ=F",
    "USD": "DX-Y.NYB",
    "OVX": "^OVX",
    "VIX": "^VIX"
}

# ‚úÖ 2Ô∏è‚É£ P√©riode
start_date = "2010-01-01"
end_date = datetime.datetime.now().strftime('%Y-%m-%d')

# ‚úÖ 3Ô∏è‚É£ T√©l√©chargement robuste avec retry
attempts = 3
for i in range(attempts):
    try:
        df_all = yf.download(list(assets.values()), start=start_date, end=end_date, group_by="ticker")
        break  # Stop retry loop if success
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur lors du t√©l√©chargement, tentative {i+1}/{attempts}...")
        time.sleep(3)
else:
    raise Exception("üö® √âchec du t√©l√©chargement apr√®s plusieurs tentatives !")

# ‚úÖ 4Ô∏è‚É£ Aplatir les colonnes proprement
if isinstance(df_all.columns, pd.MultiIndex):
    df_all.columns = ['_'.join(col).strip() for col in df_all.columns]
df_all.reset_index(inplace=True)

# ‚úÖ 5Ô∏è‚É£ Nettoyage des noms de colonnes
df_all.columns = (
    df_all.columns.str.lower()
    .str.replace(r"[\^=]", "_", regex=True)
    .str.replace(r"[^\w]", "_", regex=True)
    .str.replace("__", "_")
    .str.strip("_")
)

# ‚úÖ 6Ô∏è‚É£ V√©rification et correction dynamique du renommage
rename_columns = {col: col.replace("bz_f", "brent").replace("cl_f", "wti").replace("dx_y_nyb", "usdindex") 
                  for col in df_all.columns if "bz_f" in col or "cl_f" in col or "dx_y_nyb" in col}

df_all.rename(columns=rename_columns, inplace=True)

# ‚úÖ 7Ô∏è‚É£ V√©rifier et combler les valeurs manquantes
df_all.fillna(method='ffill', inplace=True)  # Remplissage par les valeurs pr√©c√©dentes
df_all.fillna(method='bfill', inplace=True)  # Remplissage par les valeurs suivantes
df_all.fillna(0, inplace=True)  # Dernier recours, remplace les NaN restants par 0

# ‚úÖ 8Ô∏è‚É£ Suppression finale des colonnes `ovx_*` et `vix_*`
cols_to_drop = [col for col in df_all.columns if "ovx" in col or "vix" in col]
df_all.drop(columns=cols_to_drop, errors="ignore", inplace=True)

# ‚úÖ 9Ô∏è‚É£ V√©rifier apr√®s suppression
print("\n‚úÖ Colonnes apr√®s suppression OVX/VIX :")
print(df_all.columns.tolist())

# ‚úÖ üî• 1Ô∏è‚É£0Ô∏è‚É£ √âcriture propre et s√©curis√©e
file_path = "historical_data_cleaned.parquet"

if os.path.exists(file_path):
    df_old = pd.read_parquet(file_path)
    df_all = pd.concat([df_old, df_all]).drop_duplicates(subset=["date"], keep="last").reset_index(drop=True)

temp_file = file_path + ".tmp"
df_all.to_parquet(temp_file, engine="pyarrow", compression="snappy")
os.replace(temp_file, file_path)

# ‚úÖ 1Ô∏è‚É£1Ô∏è‚É£ V√©rification finale
print("\n‚úÖ Donn√©es finales :")
print(df_all.head())
print("\nüìä Shape:", df_all.shape)
print("\n‚úÖ Colonnes finales :", df_all.columns.tolist())

